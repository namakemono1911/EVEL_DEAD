/*****************************************************************************
vec3.cpp
Aythor	: 上野　匠
Data	: 2017_04_24
=============================================================================
Updata

*****************************************************************************/
//////////////////////////////////////////////////////////////////////////////
//ヘッダーファイルインクルード
//////////////////////////////////////////////////////////////////////////////
#include "main.h"
#include "vec.h"
#include <math.h>

//////////////////////////////////////////////////////////////////////////////
//関数名	:	vec3Normalize
//
//引数		:	point	ベクトルの始点
//				vec1	終点1
//				vec2	終点2
//
//返り値	:	法線ベクトル
//説明		:	法線ベクトル取得
//////////////////////////////////////////////////////////////////////////////
vec3	vec3::normalize(vec3 vec)
{
	//変数宣言
	double		len;
	bool		minus[3] = { false };

	//マイナスか確認
	if (vec.x < 0)
		minus[0] = true;
	if (vec.y < 0)
		minus[1] = true;
	if (vec.z < 0)
		minus[0] = true;

	len = sqrt(vec.x * vec.x + vec.y * vec.y + vec.z * vec.z);

	vec *= 1.0f / len;

	return vec;
}

//////////////////////////////////////////////////////////////////////////////
//関数名	:	vec3Normalize
//
//引数		:	point	ベクトルの始点
//				vec1	終点1
//				vec2	終点2
//
//返り値	:	法線ベクトル
//説明		:	法線ベクトル取得
//////////////////////////////////////////////////////////////////////////////
Dvec3 vec3::Dnormalize(vec3 vec)
{
	//変数宣言
	double		len;
	bool		minus[3] = { false };

	//マイナスか確認
	if (vec.x < 0)
		minus[0] = true;
	if (vec.y < 0)
		minus[1] = true;
	if (vec.z < 0)
		minus[0] = true;

	len = sqrt(vec.x * vec.x + vec.y * vec.y + vec.z * vec.z);

	vec *= 1.0f / len;

	return Dvec3(vec.x, vec.y, vec.z);
}

//////////////////////////////////////////////////////////////////////////////
//関数名	:	vec3::lenVector
//
//引数		:	vec		長さを図りたいベクトル
//
//返り値	:	ベクトルの長さ
//説明		:	ベクトルの長さ取得
//////////////////////////////////////////////////////////////////////////////
double	vec3::lenVector(vec3 vec)
{
	return sqrt(vec.x * vec.x + vec.y * vec.y + vec.z * vec.z);
}

//////////////////////////////////////////////////////////////////////////////
//関数名	:	vec3::innerProduct
//
//引数		:	v1	対象のベクトル1
//				v2	対象のベクトル2
//
//返り値	:	ベクトルの内積
//説明		:	ベクトルの内積取得
//////////////////////////////////////////////////////////////////////////////
double	vec3::innerProduct(vec3 v1, vec3 v2, vec3 point)
{
	v1 = v1 - point;
	v2 = v2 - point;

	return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
}

//////////////////////////////////////////////////////////////////////////////
//関数名	:	vec3::crossProduct
//
//引数		:	v1	対象のベクトル1
//				v2	対象のベクトル2
//
//返り値	:	ベクトルの外積
//説明		:	ベクトルの外積取得
//////////////////////////////////////////////////////////////////////////////
vec3	vec3::crossProduct(vec3 v1, vec3 v2, vec3 point)
{
	//変数宣言
	vec3 work;

	//ベクトルを原点に合わせる
	v1 = v1 - point;
	v2 = v2 - point;

	//外積計算
	work.x = v1.y * v2.z - v1.z * v2.y;
	work.y = v1.z * v2.x - v1.x * v2.z;
	work.z = v1.x * v2.y - v1.y * v2.x;

	return work;
}

//////////////////////////////////////////////////////////////////////////////
//関数名	:	vec3::DcrossProduct
//
//引数		:	v1	対象のベクトル1
//				v2	対象のベクトル2
//
//返り値	:	ベクトルの外積
//説明		:	ベクトルの外積取得
//////////////////////////////////////////////////////////////////////////////
D3DXVECTOR3 vec3::DcrossProduct(vec3 v1, vec3 v2, vec3 point)
{
	//変数宣言
	vec3 work;

	//ベクトルを原点に合わせる
	v1 = v1 - point;
	v2 = v2 - point;

	//外積計算
	work.x = v1.y * v2.z - v1.z * v2.y;
	work.y = v1.z * v2.x - v1.x * v2.z;
	work.z = v1.x * v2.y - v1.y * v2.x;

	return D3DXVECTOR3(work.x, work.y, work.z);
}

//////////////////////////////////////////////////////////////////////////////
//関数名	:	vec3::angleVector
//
//引数		:	v1	対象のベクトル1
//				v2	対象のベクトル2
//
//返り値	:	ベクトルのなす角
//説明		:	ベクトルのなす角取得
//////////////////////////////////////////////////////////////////////////////
double	vec3::angleVector(vec3 v1, vec3 v2)
{
	//変数宣言
	double	len[2];	//ベクトルの長さ
	double	cos;	//Cos角

	len[0] = vec3::lenVector(v1);
	len[1] = vec3::lenVector(v2);

	cos = vec3::innerProduct(v1, v2) / (len[0] * len[1]);
	if (cos > 1.f)
		cos = 1.f;

	return	acos(cos);
}

//////////////////////////////////////////////////////////////////////////////
//関数名	:	vec3::posLen
//
//引数		:	v1	対象のベクトル1
//				v2	対象のベクトル2
//
//返り値	:	ベクトルの距離
//説明		:	ベクトルの二点間距離
//////////////////////////////////////////////////////////////////////////////
double	vec3::posLen(vec3 v1, vec3 v2)
{
	return sqrt((v2.x - v1.x) * (v2.x - v1.x) + (v2.y - v1.y) * (v2.y - v1.y) + (v2.z - v1.z) * (v2.z - v1.z));
}

//////////////////////////////////////////////////////////////////////////////
//関数名	:	vec3::normalVec
//
//引数		:	v1	対象のベクトル1
//				v2	対象のベクトル2
//
//返り値	:	法線ベクトル
//説明		:	法線ベクトル計算
//////////////////////////////////////////////////////////////////////////////
vec3	vec3::normalVec(vec3 point, vec3 v1, vec3 v2)
{
	//変数宣言
	vec3	work;		//作業用変数
	vec3	wVec[2];	//作業用

						//ベクトルを原点に合わせる
	v1 = v1 - point;
	v2 = v2 - point;

	//外積を求める
	work = vec3::crossProduct(v1, v2);

	//外積を正規化
	work = vec3::normalize(work);

	return work;
}

//////////////////////////////////////////////////////////////////////////////
//関数名	:	vec3::ask
//
//引数		:	center	原点となる座標
//				obj		対象となる座標
//
//返り値	:	centerからobjまでの座標
//説明		:	centerからobjまでのベクトルを求める
//////////////////////////////////////////////////////////////////////////////
vec3 vec3::ask(vec3 center, vec3 obj)
{
	return obj - center;
}


//////////////////////////////////////////////////////////////////////////////
//関数名	:	vec3::ask
//
//引数		:	center	原点となる座標
//				obj		対象となる座標
//
//返り値	:	centerからobjまでの座標
//説明		:	centerからobjまでのベクトルを求める
//////////////////////////////////////////////////////////////////////////////
Dvec3 vec3::Dask(vec3 center, vec3 obj)
{
	return Dvec3(
		obj.x - center.x,
		obj.y - center.y,
		obj.z - center.z);
}

//###########################################################################################################################
// Vec2
//###########################################################################################################################
//////////////////////////////////////////////////////////////////////////////
//関数名	:	vec3Normalize
//
//引数		:	point	ベクトルの始点
//				vec1	終点1
//				vec2	終点2
//
//返り値	:	法線ベクトル
//説明		:	法線ベクトル取得
//////////////////////////////////////////////////////////////////////////////
vec2	vec2::normalize(vec2 vec)
{
	//変数宣言
	double		len;
	bool		minusX, minusY;

	//minusフラグ
	minusX = false;
	minusY = false;
	if (vec.x < 0)
	{
		minusX = true;
	}
	if (vec.y < 0)
	{
		minusY = true;
	}

	len = sqrt(vec.x * vec.x + vec.y * vec.y);

	vec *= 1.0f / len;

	if (minusX == true)
	{
		vec.x *= -1;
	}
	if (minusY == true)
	{
		vec.y *= -1;
	}

	return vec;
}