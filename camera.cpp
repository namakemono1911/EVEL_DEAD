/*****************************************************************************
camera.cpp
Aythor	: 上野　匠
Data	: 2017_04_20
=============================================================================
Updata

*****************************************************************************/
//////////////////////////////////////////////////////////////////////////////
//ファイルインクルード
//////////////////////////////////////////////////////////////////////////////
#include "main.h"
#include "input.h"
#include "renderer.h"
#include "camera.h"
#include "manager.h"

//////////////////////////////////////////////////////////////////////////////
//静的メンバ変数初期化
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//関数名	: Camera::Camera()
//返り値	: 
//説明		: コンストラクタ
//////////////////////////////////////////////////////////////////////////////
Camera::Camera()
{

}

//////////////////////////////////////////////////////////////////////////////
//関数名	: Camera::~Camera()
//返り値	: 
//説明		: デストラクタ
//////////////////////////////////////////////////////////////////////////////
Camera::~Camera()
{

}

//////////////////////////////////////////////////////////////////////////////
//関数名	: Camera::init
//返り値	: 
//説明		: 初期化
//////////////////////////////////////////////////////////////////////////////
HRESULT	Camera::init(D3DXVECTOR3 pos, D3DXVECTOR3 at, D3DXVECTOR3 up, float len)
{
	mVecUp = up;
	mAngle = D3DXVECTOR2(0.f, 0.f);
	mLen = len;
	mAspect = (float)(SCREEN_WIDTH / SCREEN_HEIGHT);
	mFovy = PI/ 3.f;

	mPosAt = at;
	mTransform.pos = pos;

	setObjType(CAMERA);
	mMyName = "camera";

	return S_OK;
}

//////////////////////////////////////////////////////////////////////////////
//関数名	: Camera::update
//返り値	: 
//説明		: 更新
//////////////////////////////////////////////////////////////////////////////
void	Camera::update(void)
{
	setCamera();
}

//////////////////////////////////////////////////////////////////////////////
//関数名	: Camera::create
//返り値	: 
//説明		: カメラ生成
//////////////////////////////////////////////////////////////////////////////
Camera		*Camera::create(D3DXVECTOR3 pos, D3DXVECTOR3 at, D3DXVECTOR3 up, float len)
{
	auto camera = new Camera;

	camera->init(pos, at, up, len);
	return camera;
}

//////////////////////////////////////////////////////////////////////////////
//関数名	: Camera::getViewMtx
//返り値	: 
//説明		: ビューマトリックス取得
//////////////////////////////////////////////////////////////////////////////
D3DXMATRIX	Camera::getViewMtx(void)
{
	return mView;
}

//////////////////////////////////////////////////////////////////////////////
//関数名	: Camera::setCamera
//返り値	: 
//説明		: ビューマトリックス設定
//////////////////////////////////////////////////////////////////////////////
void Camera::setCamera(void)
{
	//変数宣言
	LPDIRECT3DDEVICE9	device = Renderer::getDevice();

	//カメラ行列の設定
	D3DXMatrixLookAtLH(&mView, &mTransform.pos, &mPosAt, &mVecUp);
	device->SetTransform(D3DTS_VIEW, &mView);

	//プロジェクション行列の設定
	D3DXMatrixPerspectiveFovLH(&mProj,
		mFovy,				//視野角
		mAspect,			//アスペクト比
		1.f,				//near
		1000.f);			//far

	device->SetTransform(D3DTS_PROJECTION, &mProj);	//行列設定
}
