/*****************************************************************************
fade.cpp
Aythor	: 上野　匠
Data	: 2017_06_28
=============================================================================
Updata

*****************************************************************************/
//////////////////////////////////////////////////////////////////////////////
//ヘッダーファイルインクルード
//////////////////////////////////////////////////////////////////////////////
#include "main.h"
#include "scene.h"
#include "outlaw2D.h"
#include "fade.h"

//////////////////////////////////////////////////////////////////////////////
//関数名	: Fade::init
//返り値	: 
//説明		: 初期化
//////////////////////////////////////////////////////////////////////////////
HRESULT Fade::init(void)
{
	mTime = 0;
	mNow = 0;
	bindTex(NULL);
	return Outlaw2D::init();
}

//////////////////////////////////////////////////////////////////////////////
//関数名	: Fade::uninit
//返り値	: 
//説明		: 終了
//////////////////////////////////////////////////////////////////////////////
void Fade::uninit(void)
{
	Outlaw2D::uninit();
}

//////////////////////////////////////////////////////////////////////////////
//関数名	: Fade::update
//返り値	: 
//説明		: 更新
//////////////////////////////////////////////////////////////////////////////
void Fade::update(void)
{
	//何もしてないなら帰れ
	if(mMode == FADE_NONE)
		return;

	//フェード中ならカウントダウン
	if(mMode != FADE_NONE)
		mNow++;

	//フェードイン処理
	if(mMode == FADE_IN)
		updateFadeIn();

	//フェードアウト処理
	if(mMode == FADE_OUT)
		updateFadeOut();

	Outlaw2D::update();
}

//////////////////////////////////////////////////////////////////////////////
//関数名	: Fade::draw
//返り値	: 
//説明		: 描画
//////////////////////////////////////////////////////////////////////////////
void Fade::draw(void)
{
	Outlaw2D::draw();
}

//////////////////////////////////////////////////////////////////////////////
//関数名	: Fade::fadeIn
//返り値	: 
//説明		: フェードイン、指定色から脱色
//////////////////////////////////////////////////////////////////////////////
void Fade::fadeIn(int time)
{
	mTime = time;
	mMode = FADE_IN;
}

//////////////////////////////////////////////////////////////////////////////
//関数名	: Fade::fadeOut
//返り値	: 
//説明		: フェードアウト、現在の色から指定色になっていく
//////////////////////////////////////////////////////////////////////////////
void Fade::fadeOut(int time)
{
	mTime = time;
	mMode = FADE_OUT;
}

//////////////////////////////////////////////////////////////////////////////
//関数名	: Fade::create
//返り値	: 
//説明		: 生成
//////////////////////////////////////////////////////////////////////////////
Fade * Fade::create(D3DXCOLOR color)
{
	Fade *fade;

	fade = new Fade;

	fade->Outlaw2D::setAll(
		D3DXVECTOR3(SCREEN_WIDTH * 0.5f, SCREEN_HEIGHT * 0.5f, 0.f),
		D3DXVECTOR3(SCREEN_WIDTH, SCREEN_HEIGHT, 0.f),
		D3DXVECTOR2(0.f, 0.f),
		D3DXVECTOR2(1.f, 1.f),
		color);

	fade->mColor = color;

	fade->init();

	return fade;
}


//////////////////////////////////////////////////////////////////////////////
//関数名	: Fade::updateFadeIn
//返り値	: 
//説明		: フェードイン更新
//////////////////////////////////////////////////////////////////////////////
void Fade::updateFadeIn(void)
{
	//時間の割合
	float percent = (float)mNow / (float)mTime;

	//α値に加算
	setColor(D3DXCOLOR(mColor.r, mColor.g, mColor.b, 1.f - percent));

	if (percent >= 1)
	{
		mNow = 0;
		mMode = FADE_NONE;
	}
}

//////////////////////////////////////////////////////////////////////////////
//関数名	: Fade::updateFadeOut
//返り値	: 
//説明		: フェードアウト更新
//////////////////////////////////////////////////////////////////////////////
void Fade::updateFadeOut(void)
{
	//時間の割合
	float percent = (float)mNow / (float)mTime;

	//α値に加算
	setColor(D3DXCOLOR(mColor.r, mColor.g, mColor.b, percent));

	if (percent >= 1)
	{
		mNow = 0;
		mMode = FADE_NONE;
	}
}
